{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Desktop/laundry-coms/src/pages/Messages.jsx\",\n  _s = $RefreshSig$();\nimport { useNavigate } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport ResultBox from \"./Result\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Messages() {\n  _s();\n  const [messages, setMessages] = useState([\"Let's get started\"]);\n  const [input, setInput] = useState('');\n  const navigate = useNavigate();\n  const [info, setInfo] = useState([]);\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n  const [stateInfo, setStateInfo] = useState({});\n  const [tripPlanReady, setTripPlanReady] = useState(false);\n  const [tripPlan, setTripPlan] = useState(null);\n  const [hasRun, setHasRun] = useState(false);\n  useEffect(() => {\n    if (tripPlanReady && !hasRun) {\n      // Do something specific when tripPlanReady is true\n      console.log(\"Trip plan is ready!\", stateInfo);\n      sendWeather();\n      setHasRun(true);\n    }\n    //         if (weatherData) {\n    //             // Use setState function to update the state properly\n    //             setStateInfo(prevState => ({ ...prevState, real_time_context: weatherData }));\n    //             sendFinalMessage();\n    //           }\n  }, [tripPlanReady, weatherData]);\n  const sendWeather = async obj => {\n    try {\n      const response = await fetch('https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current=temperature_2m,precipitation&hourly=temperature_2m&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_hours,precipitation_probability_max&temperature_unit=fahrenheit&wind_speed_unit=mph&precipitation_unit=inch&timeformat=unixtime&timezone=auto&forecast_days=3');\n      const data = await response.json();\n      // Save the data as JSON (for example, to a file or variable)\n      const jsonData = JSON.stringify(data, null, 2);\n      //             console.log(jsonData);\n      console.log(\"state info in send weather is\", stateInfo);\n\n      // If successful, update the message list with the new message\n      if (response.ok) {\n        setWeatherData(jsonData);\n        setStateInfo(prevState => ({\n          ...prevState,\n          real_time_context: jsonData\n        }));\n        sendFinalMessage();\n        console.log(data);\n      } else {\n        console.error('Failed to send message:', data.error);\n      }\n    } catch {}\n  };\n  const initialize = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/create_initial_state', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n\n      // If successful, update the message list with the new message\n      if (response.ok) {\n        setStateInfo(data);\n        console.log(data);\n      } else {\n        console.error('Failed to send message:', data.error);\n      }\n    } catch {}\n  };\n  function cleanMessage(oldMessage) {\n    // Step 1: Trim leading and trailing whitespace\n    let cleanedMessage = oldMessage.trim();\n\n    // Step 2: Remove extra newlines and normalize spacing between paragraphs\n    cleanedMessage = cleanedMessage.replace(/\\n+/g, '\\n'); // Collapse multiple newlines into one\n\n    // Step 3: Optionally, add HTML tags or other formatting (if you need HTML formatting)\n    // For example, replacing headings or bullet points with HTML tags\n    cleanedMessage = cleanedMessage.replace(/###\\s*(.*)/g, '<h2>$1</h2>'); // Convert ### to <h2> for section headers\n    cleanedMessage = cleanedMessage.replace(/####\\s*(.*)/g, '<h3>$1</h3>'); // Convert #### to <h3> for sub-section headers\n    cleanedMessage = cleanedMessage.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>'); // Bold **text**\n    cleanedMessage = cleanedMessage.replace(/\\n/g, '<br>'); // Replace newlines with <br> for HTML formatting\n\n    // Step 4: Return the cleaned (and potentially formatted) message\n    return cleanedMessage;\n  }\n  const sendFinalMessage = async () => {\n    try {\n      console.log(stateInfo);\n      // Send the message to the backend via POST request\n      const response = await fetch('http://127.0.0.1:5000/api/generate_trip', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          state: stateInfo\n        })\n      });\n      const data = await response.json();\n\n      // If successful, update the message list with the new message\n      if (response.ok) {\n        // setMessages(prevMessages => [...prevMessages, cleanMessage(data.state.trip_plan)]);\n        setStateInfo(data.state); // Update the state\n        setTripPlan(cleanMessage(data.state.trip_plan)); // Assuming `setTripPlan` is a React state setter\n        sendWeather(null);\n      } else {\n        console.error('Failed to send message:', data.error);\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  const sendMessage = async () => {\n    setMessages(prevMessages => [...prevMessages, input]);\n    if (input.trim()) {\n      try {\n        // Send the message to the backend via POST request\n        const response = await fetch('http://127.0.0.1:5000/api/process_input', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_input: input,\n            state: stateInfo\n          })\n        });\n        const data = await response.json();\n\n        // If successful, update the message list with the new message\n        if (response.ok) {\n          setMessages(prevMessages => [...prevMessages, data.feedback]); // Assuming the backend returns the new message\n          setStateInfo(data.state);\n          setTripPlanReady(data.trip_plan_ready);\n\n          // console.log(data.trip_plan_ready)\n          // if(data.trip_plan_ready)\n          // {\n          //     console.log(\"true ,\" , data.state);\n          //     sendWeather(data.state);\n          // }\n\n          setInput(''); // Clear input field after sending\n        } else {\n          console.error('Failed to send message:', data.error);\n        }\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [\"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      children: \"Go to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [\"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this)), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [\"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendWeather,\n        children: \"SendWeather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: initialize,\n        children: \"initialize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resultBox\",\n      children: tripPlan && /*#__PURE__*/_jsxDEV(ResultBox, {\n        tripPlan: tripPlan\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 55\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n}\n_s(Messages, \"/1QgNvlUwGymTQwvKef06xnsFmA=\", false, function () {\n  return [useNavigate];\n});\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useNavigate","React","useState","useEffect","ResultBox","jsxDEV","_jsxDEV","Messages","_s","messages","setMessages","input","setInput","navigate","info","setInfo","weatherData","setWeatherData","error","setError","stateInfo","setStateInfo","tripPlanReady","setTripPlanReady","tripPlan","setTripPlan","hasRun","setHasRun","console","log","sendWeather","obj","response","fetch","data","json","jsonData","JSON","stringify","ok","prevState","real_time_context","sendFinalMessage","initialize","method","headers","cleanMessage","oldMessage","cleanedMessage","trim","replace","body","state","trip_plan","sendMessage","prevMessages","user_input","feedback","trip_plan_ready","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","message","index","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/luke/Desktop/laundry-coms/src/pages/Messages.jsx"],"sourcesContent":["import {useNavigate} from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport ResultBox from \"./Result\";\n\nfunction Messages() {\n    const [messages, setMessages] = useState([\n        \"Let's get started\",\n    ]);\n    const [input, setInput] = useState('');\n    const navigate = useNavigate();\n    const [info, setInfo] = useState([]);\n    const [weatherData, setWeatherData] = useState(null);\n    const [error, setError] = useState(null);\n    const [stateInfo, setStateInfo] = useState({});\n    const [tripPlanReady, setTripPlanReady] = useState(false);\n    const [tripPlan, setTripPlan] = useState(null);\nconst [hasRun, setHasRun] = useState(false);\n\n    useEffect(() => {\n        if (tripPlanReady && !hasRun) {\n          // Do something specific when tripPlanReady is true\n          console.log(\"Trip plan is ready!\" , stateInfo);\n          sendWeather();\nsetHasRun(true);\n        }\n//         if (weatherData) {\n//             // Use setState function to update the state properly\n//             setStateInfo(prevState => ({ ...prevState, real_time_context: weatherData }));\n//             sendFinalMessage();\n//           }\n      }, [tripPlanReady, weatherData]);\n\n\n    const sendWeather = async (obj) => {\n        try{\n            const response = await fetch('https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current=temperature_2m,precipitation&hourly=temperature_2m&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_hours,precipitation_probability_max&temperature_unit=fahrenheit&wind_speed_unit=mph&precipitation_unit=inch&timeformat=unixtime&timezone=auto&forecast_days=3');\n            const data = await response.json();\n            // Save the data as JSON (for example, to a file or variable)\n            const jsonData = JSON.stringify(data, null, 2);\n//             console.log(jsonData);\n            console.log(\"state info in send weather is\", stateInfo);\n\n            // If successful, update the message list with the new message\n            if (response.ok) {\n                setWeatherData(jsonData); \n                setStateInfo(prevState => ({ ...prevState, real_time_context: jsonData }));  \n                sendFinalMessage();\n                console.log(data);\n            } else {\n                console.error('Failed to send message:', data.error);\n            }\n        }catch{}\n    }\n\n    const initialize = async () => {\n        try{\n            const response = await fetch('http://127.0.0.1:5000/api/create_initial_state', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n            const data = await response.json();\n            \n            // If successful, update the message list with the new message\n            if (response.ok) {\n                setStateInfo(data); \n                console.log(data);\n            } else {\n                console.error('Failed to send message:', data.error);\n            }\n        }catch{}\n    }\n\n    function cleanMessage(oldMessage) {\n        // Step 1: Trim leading and trailing whitespace\n        let cleanedMessage = oldMessage.trim();\n\n        // Step 2: Remove extra newlines and normalize spacing between paragraphs\n        cleanedMessage = cleanedMessage.replace(/\\n+/g, '\\n'); // Collapse multiple newlines into one\n\n        // Step 3: Optionally, add HTML tags or other formatting (if you need HTML formatting)\n        // For example, replacing headings or bullet points with HTML tags\n        cleanedMessage = cleanedMessage.replace(/###\\s*(.*)/g, '<h2>$1</h2>'); // Convert ### to <h2> for section headers\n        cleanedMessage = cleanedMessage.replace(/####\\s*(.*)/g, '<h3>$1</h3>'); // Convert #### to <h3> for sub-section headers\n        cleanedMessage = cleanedMessage.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>'); // Bold **text**\n        cleanedMessage = cleanedMessage.replace(/\\n/g, '<br>'); // Replace newlines with <br> for HTML formatting\n\n        // Step 4: Return the cleaned (and potentially formatted) message\n        return cleanedMessage;\n    }\n\n    const sendFinalMessage = async () => {\n        try {\n            console.log(stateInfo);\n            // Send the message to the backend via POST request\n            const response = await fetch('http://127.0.0.1:5000/api/generate_trip', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ \n                    state: stateInfo\n                }),\n            });\n            const data = await response.json();\n    \n            // If successful, update the message list with the new message\n            if (response.ok) {\n                // setMessages(prevMessages => [...prevMessages, cleanMessage(data.state.trip_plan)]);\n                setStateInfo(data.state); // Update the state\n                setTripPlan(cleanMessage(data.state.trip_plan)); // Assuming `setTripPlan` is a React state setter\n                sendWeather(null);\n            } else {\n                console.error('Failed to send message:', data.error);\n            }\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n        }   \n    };\n    \n\n\n    const sendMessage = async () => {\n            setMessages(prevMessages => [...prevMessages, input])\n            if (input.trim()) {\n                try {\n                    // Send the message to the backend via POST request\n                    const response = await fetch('http://127.0.0.1:5000/api/process_input', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({ \n                            user_input: input,\n                            state: stateInfo\n                         }),\n                    });\n\n                    const data = await response.json();\n                    \n                    // If successful, update the message list with the new message\n                    if (response.ok) {\n                        setMessages(prevMessages => [...prevMessages, data.feedback]); // Assuming the backend returns the new message\n                        setStateInfo(data.state);\n                        setTripPlanReady(data.trip_plan_ready);\n\n                        // console.log(data.trip_plan_ready)\n                        // if(data.trip_plan_ready)\n                        // {\n                        //     console.log(\"true ,\" , data.state);\n                        //     sendWeather(data.state);\n                        // }\n\n                        setInput(''); // Clear input field after sending\n                    } else {\n                        console.error('Failed to send message:', data.error);\n                    }\n                } catch (error) {\n                    console.error(\"Error sending message:\", error);\n                }\n        }\n    };\n\n\n\n    return (\n        <div className=\"chat-app\">\n            <h1>Messages</h1>\n            <button onClick={() => navigate(\"/\")}>Go to Home</button>\n            <div className=\"messages\">\n                {messages.map((message, index) => (\n                    <div className=\"message\" key={index}>{message}</div>\n                ))}\n            </div>\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                />\n                <button onClick={sendMessage}>Send</button>\n                <button onClick={sendWeather}>SendWeather</button>\n                <button onClick={initialize}>initialize</button>\n            </div>\n            <div className = \"resultBox\">{tripPlan && <ResultBox tripPlan={tripPlan} />}</div>\n        </div>\n    );\n}\n\nexport default Messages;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}