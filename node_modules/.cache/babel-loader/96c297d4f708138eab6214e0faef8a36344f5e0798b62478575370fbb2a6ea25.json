{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Desktop/spr24/wp2/laundry-coms/src/pages/MyTimer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport './styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyTimer = ({\n  timerID = 0,\n  initialMinutes = 45\n}) => {\n  _s();\n  const Ref = useRef(null);\n  const [timer, setTimer] = useState(`00:${initialMinutes}:00`);\n  const [isActive, setIsActive] = useState(false);\n  const socket = new WebSocket('ws://34.226.198.62:3000');\n  const getTimeRemaining = endtime => {\n    const total = Date.parse(endtime) - new Date();\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / (1000 * 60 * 60) % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds\n    };\n  };\n  const startTimer = endtime => {\n    let {\n      total,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(endtime);\n    if (total >= 0) {\n      setTimer((hours > 9 ? hours : \"0\" + hours) + \":\" + (minutes > 9 ? minutes : \"0\" + minutes) + \":\" + (seconds > 9 ? seconds : \"0\" + seconds));\n    } else {\n      clearInterval(Ref.current);\n      setIsActive(false);\n    }\n  };\n  const clearTimer = endtime => {\n    if (Ref.current) clearInterval(Ref.current); // Clear any existing timer\n    const id = setInterval(() => {\n      startTimer(endtime);\n    }, 1000);\n    Ref.current = id; // Set the new timer\n  };\n  const getDeadTime = () => {\n    let deadline = new Date();\n    deadline.setMinutes(deadline.getMinutes() + initialMinutes);\n    return deadline;\n  };\n  const onClickReset = () => {\n    clearInterval(Ref.current); // Clear the existing interval\n    Ref.current = null; // Reset the ref\n    setTimer(`00:${initialMinutes}:00`); // Reset the timer display\n    setIsActive(false); // Mark the timer as inactive\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      const timerMsg = {\n        id: timerID,\n        endTime: \" \",\n        reset: true\n      };\n      socket.send(JSON.stringify(timerMsg));\n    } else {\n      console.error('WebSocket is not open. Message not sent.');\n    }\n  };\n  const startButtonHandler = () => {\n    setIsActive(true); // Activate the timer\n    const deadTime = getDeadTime(); // Get the deadline for the timer\n    if (!Ref.current) {\n      // Check if the timer is not already running\n      clearTimer(deadTime); // Start the timer\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        const deadTimeString = deadTime.toISOString();\n        const timerMsg = {\n          id: timerID,\n          endTime: deadTimeString,\n          reset: false,\n          newClient: false\n        };\n        socket.send(JSON.stringify(timerMsg));\n      } else {\n        console.error('WebSocket is not open. Message not sent.');\n      }\n    }\n  };\n  socket.onmessage = function (event) {\n    console.log('Message from server:', event.data);\n    const message = JSON.parse(event.data);\n    if (message.id === timerID) {\n      if (message.reset === true) {\n        clearInterval(Ref.current); // Clear the existing interval\n        Ref.current = null; // Reset the ref\n        setTimer(`00:${initialMinutes}:00`); // Reset the timer display\n        setIsActive(false); // Mark the timer as inactive\n      } else {\n        const deadTime = new Date(message.endTime); // Convert ISO string back to Date object\n        clearTimer(deadTime);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startButtonHandler,\n      children: \"Start Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(MyTimer, \"FXpAZIEawJyCqdh9QnDgCpcLwKI=\");\n_c = MyTimer;\nexport default MyTimer;\nvar _c;\n$RefreshReg$(_c, \"MyTimer\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","MyTimer","timerID","initialMinutes","_s","Ref","timer","setTimer","isActive","setIsActive","socket","WebSocket","getTimeRemaining","endtime","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearInterval","current","clearTimer","id","setInterval","getDeadTime","deadline","setMinutes","getMinutes","onClickReset","readyState","OPEN","timerMsg","endTime","reset","send","JSON","stringify","console","error","startButtonHandler","deadTime","deadTimeString","toISOString","newClient","onmessage","event","log","data","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/luke/Desktop/spr24/wp2/laundry-coms/src/pages/MyTimer.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport './styles/styles.css';\n\nconst MyTimer = ({timerID = 0, initialMinutes = 45}) => {\n    const Ref = useRef(null);\n    const [timer, setTimer] = useState(`00:${initialMinutes}:00`);\n    const [isActive, setIsActive] = useState(false);\n    const socket = new WebSocket('ws://34.226.198.62:3000');\n\n    const getTimeRemaining = (endtime) => {\n        const total = Date.parse(endtime) - new Date();\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor((total / 1000 / 60) % 60);\n        const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n        return { total, hours, minutes, seconds };\n    };\n\n    const startTimer = (endtime) => {\n        let { total, hours, minutes, seconds } = getTimeRemaining(endtime);\n        if (total >= 0) {\n            setTimer(\n                (hours > 9 ? hours : \"0\" + hours) + \":\" +\n                (minutes > 9 ? minutes : \"0\" + minutes) + \":\" +\n                (seconds > 9 ? seconds : \"0\" + seconds)\n            );\n        } else {\n            clearInterval(Ref.current);\n            setIsActive(false);\n        }\n    };\n\n    const clearTimer = (endtime) => {\n        if (Ref.current) clearInterval(Ref.current); // Clear any existing timer\n        const id = setInterval(() => {\n            startTimer(endtime);\n        }, 1000);\n        Ref.current = id; // Set the new timer\n    };\n\n    const getDeadTime = () => {\n        let deadline = new Date();\n        deadline.setMinutes(deadline.getMinutes() + initialMinutes);\n        return deadline;\n    };\n\n    const onClickReset = () => {\n        clearInterval(Ref.current); // Clear the existing interval\n        Ref.current = null; // Reset the ref\n        setTimer(`00:${initialMinutes}:00`); // Reset the timer display\n        setIsActive(false); // Mark the timer as inactive\n        if (socket && socket.readyState === WebSocket.OPEN) {\n            const timerMsg = {\n                id: timerID,\n                endTime: \" \",\n                reset: true\n            };\n            socket.send(JSON.stringify(timerMsg));\n        } else {\n            console.error('WebSocket is not open. Message not sent.');\n        }\n    };\n\n    const startButtonHandler = () => {\n        setIsActive(true); // Activate the timer\n        const deadTime = getDeadTime(); // Get the deadline for the timer\n        if (!Ref.current) { // Check if the timer is not already running\n            clearTimer(deadTime); // Start the timer\n            if (socket && socket.readyState === WebSocket.OPEN) {\n                const deadTimeString = deadTime.toISOString();\n                const timerMsg = {\n                    id: timerID,\n                    endTime: deadTimeString,\n                    reset: false,\n                    newClient: false\n                };\n                socket.send(JSON.stringify(timerMsg));\n            } else {\n                console.error('WebSocket is not open. Message not sent.');\n            }\n        }\n    };\n\n    socket.onmessage = function(event) {\n        console.log('Message from server:', event.data);\n        const message = JSON.parse(event.data);\n        if(message.id === timerID){\n            if(message.reset === true){\n                clearInterval(Ref.current); // Clear the existing interval\n                Ref.current = null; // Reset the ref\n                setTimer(`00:${initialMinutes}:00`); // Reset the timer display\n                setIsActive(false); // Mark the timer as inactive\n            }\n            else{\n                const deadTime = new Date(message.endTime); // Convert ISO string back to Date object\n                clearTimer(deadTime);\n            }\n        }\n    };\n\n    return (\n        <div id=\"timer\">\n            <h2>{timer}</h2>\n            <button onClick={startButtonHandler}>Start Timer</button>\n            <button onClick={onClickReset}>Reset</button>\n        </div>\n    );\n};\n\nexport default MyTimer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}