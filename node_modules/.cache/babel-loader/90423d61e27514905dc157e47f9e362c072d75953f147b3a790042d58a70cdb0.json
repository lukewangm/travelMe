{"ast":null,"code":"import React,{useState,useRef}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const MyTimer=_ref=>{let{timerID=0,initialMinutes=45}=_ref;const Ref=useRef(null);const[timer,setTimer]=useState(\"00:\".concat(initialMinutes,\":00\"));const[isActive,setIsActive]=useState(false);const socket=new WebSocket('ws://localhost:3000');const getTimeRemaining=endtime=>{const total=Date.parse(endtime)-new Date();const seconds=Math.floor(total/1000%60);const minutes=Math.floor(total/1000/60%60);const hours=Math.floor(total/(1000*60*60)%24);return{total,hours,minutes,seconds};};const startTimer=endtime=>{let{total,hours,minutes,seconds}=getTimeRemaining(endtime);if(total>=0){setTimer((hours>9?hours:\"0\"+hours)+\":\"+(minutes>9?minutes:\"0\"+minutes)+\":\"+(seconds>9?seconds:\"0\"+seconds));}else{clearInterval(Ref.current);setIsActive(false);}};const clearTimer=endtime=>{if(Ref.current)clearInterval(Ref.current);// Clear any existing timer\nconst id=setInterval(()=>{startTimer(endtime);},1000);Ref.current=id;// Set the new timer\n};const getDeadTime=()=>{let deadline=new Date();deadline.setMinutes(deadline.getMinutes()+initialMinutes);return deadline;};const onClickReset=()=>{clearInterval(Ref.current);// Clear the existing interval\nRef.current=null;// Reset the ref\nsetTimer(\"00:\".concat(initialMinutes,\":00\"));// Reset the timer display\nsetIsActive(false);// Mark the timer as inactive\nif(socket&&socket.readyState===WebSocket.OPEN){const timerMsg={id:timerID,endTime:\" \",reset:true};socket.send(JSON.stringify(timerMsg));}else{console.error('WebSocket is not open. Message not sent.');}};const startButtonHandler=()=>{setIsActive(true);// Activate the timer\nconst deadTime=getDeadTime();// Get the deadline for the timer\nif(!Ref.current){// Check if the timer is not already running\nclearTimer(deadTime);// Start the timer\nif(socket&&socket.readyState===WebSocket.OPEN){const deadTimeString=deadTime.toISOString();const timerMsg={id:timerID,endTime:deadTimeString,reset:false,newClient:false};socket.send(JSON.stringify(timerMsg));}else{console.error('WebSocket is not open. Message not sent.');}}};// socket.onopen = function() {\n//     console.log('Connection established');\n//     // Send a message to the server requesting the current timer information\n//     const message = JSON.stringify({\n//         type: 'request',\n//         action: 'getTimerInfo'\n//     });\n//     socket.send(message);\n// };\nsocket.onmessage=function(event){console.log('Message from server:',event.data);const message=JSON.parse(event.data);if(message.id===timerID){if(message.reset===true){clearInterval(Ref.current);// Clear the existing interval\nRef.current=null;// Reset the ref\nsetTimer(\"00:\".concat(initialMinutes,\":00\"));// Reset the timer display\nsetIsActive(false);// Mark the timer as inactive\n}else{const deadTime=new Date(message.endTime);// Convert ISO string back to Date object\nclearTimer(deadTime);}}};return/*#__PURE__*/_jsxs(\"div\",{style:{margin:\"10px\",textAlign:\"center\"},children:[/*#__PURE__*/_jsx(\"h2\",{children:timer}),/*#__PURE__*/_jsx(\"button\",{onClick:startButtonHandler,children:\"Start Timer\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onClickReset,children:\"Reset\"})]});};export default MyTimer;// // Event listener for receiving messages from the server\n// socket.onmessage = function(event) {\n//     console.log('Message from server:', event.data);\n// };\n// // Event listener for handling possible errors\n// socket.onerror = function(error) {\n//     console.error('WebSocket error:', error);\n// };\n// // Event listener for when the connection is closed\n// socket.onclose = function(event) {\n//     console.log('Connection is closed', event);\n// };","map":{"version":3,"names":["React","useState","useRef","jsx","_jsx","jsxs","_jsxs","MyTimer","_ref","timerID","initialMinutes","Ref","timer","setTimer","concat","isActive","setIsActive","socket","WebSocket","getTimeRemaining","endtime","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearInterval","current","clearTimer","id","setInterval","getDeadTime","deadline","setMinutes","getMinutes","onClickReset","readyState","OPEN","timerMsg","endTime","reset","send","JSON","stringify","console","error","startButtonHandler","deadTime","deadTimeString","toISOString","newClient","onmessage","event","log","data","message","style","margin","textAlign","children","onClick"],"sources":["/Users/luke/Desktop/spr24/wp2/laundry-coms/src/pages/MyTimer.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\n\nconst MyTimer = ({timerID = 0, initialMinutes = 45}) => {\n    const Ref = useRef(null);\n    const [timer, setTimer] = useState(`00:${initialMinutes}:00`);\n    const [isActive, setIsActive] = useState(false);\n    const socket = new WebSocket('ws://localhost:3000');\n\n    const getTimeRemaining = (endtime) => {\n        const total = Date.parse(endtime) - new Date();\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor((total / 1000 / 60) % 60);\n        const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n        return { total, hours, minutes, seconds };\n    };\n\n    const startTimer = (endtime) => {\n        let { total, hours, minutes, seconds } = getTimeRemaining(endtime);\n        if (total >= 0) {\n            setTimer(\n                (hours > 9 ? hours : \"0\" + hours) + \":\" +\n                (minutes > 9 ? minutes : \"0\" + minutes) + \":\" +\n                (seconds > 9 ? seconds : \"0\" + seconds)\n            );\n        } else {\n            clearInterval(Ref.current);\n            setIsActive(false);\n        }\n    };\n\n    const clearTimer = (endtime) => {\n        if (Ref.current) clearInterval(Ref.current); // Clear any existing timer\n        const id = setInterval(() => {\n            startTimer(endtime);\n        }, 1000);\n        Ref.current = id; // Set the new timer\n    };\n\n    const getDeadTime = () => {\n        let deadline = new Date();\n        deadline.setMinutes(deadline.getMinutes() + initialMinutes);\n        return deadline;\n    };\n\n    const onClickReset = () => {\n        clearInterval(Ref.current); // Clear the existing interval\n        Ref.current = null; // Reset the ref\n        setTimer(`00:${initialMinutes}:00`); // Reset the timer display\n        setIsActive(false); // Mark the timer as inactive\n        if (socket && socket.readyState === WebSocket.OPEN) {\n            const timerMsg = {\n                id: timerID,\n                endTime: \" \",\n                reset: true\n            };\n            socket.send(JSON.stringify(timerMsg));\n        } else {\n            console.error('WebSocket is not open. Message not sent.');\n        }\n    };\n\n    const startButtonHandler = () => {\n        setIsActive(true); // Activate the timer\n        const deadTime = getDeadTime(); // Get the deadline for the timer\n        if (!Ref.current) { // Check if the timer is not already running\n            clearTimer(deadTime); // Start the timer\n            if (socket && socket.readyState === WebSocket.OPEN) {\n                const deadTimeString = deadTime.toISOString();\n                const timerMsg = {\n                    id: timerID,\n                    endTime: deadTimeString,\n                    reset: false,\n                    newClient: false\n                };\n                socket.send(JSON.stringify(timerMsg));\n            } else {\n                console.error('WebSocket is not open. Message not sent.');\n            }\n        }\n    };\n\n    // socket.onopen = function() {\n    //     console.log('Connection established');\n    \n    //     // Send a message to the server requesting the current timer information\n    //     const message = JSON.stringify({\n    //         type: 'request',\n    //         action: 'getTimerInfo'\n    //     });\n    \n    //     socket.send(message);\n    // };\n\n    socket.onmessage = function(event) {\n        console.log('Message from server:', event.data);\n        const message = JSON.parse(event.data);\n        if(message.id === timerID){\n            if(message.reset === true){\n                clearInterval(Ref.current); // Clear the existing interval\n                Ref.current = null; // Reset the ref\n                setTimer(`00:${initialMinutes}:00`); // Reset the timer display\n                setIsActive(false); // Mark the timer as inactive\n            }\n            else{\n                const deadTime = new Date(message.endTime); // Convert ISO string back to Date object\n                clearTimer(deadTime);\n            }\n        }\n    };\n\n    return (\n        <div style={{ margin: \"10px\", textAlign: \"center\" }}>\n            <h2>{timer}</h2>\n            <button onClick={startButtonHandler}>Start Timer</button>\n            <button onClick={onClickReset}>Reset</button>\n        </div>\n    );\n};\n\nexport default MyTimer;\n\n    // // Event listener for receiving messages from the server\n    // socket.onmessage = function(event) {\n    //     console.log('Message from server:', event.data);\n    // };\n\n    // // Event listener for handling possible errors\n    // socket.onerror = function(error) {\n    //     console.error('WebSocket error:', error);\n    // };\n\n    // // Event listener for when the connection is closed\n    // socket.onclose = function(event) {\n    //     console.log('Connection is closed', event);\n    // };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}