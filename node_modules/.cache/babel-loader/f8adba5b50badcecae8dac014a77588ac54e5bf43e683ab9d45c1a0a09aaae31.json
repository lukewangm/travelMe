{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Desktop/laundry-coms/src/pages/Messages.jsx\",\n  _s = $RefreshSig$();\nimport { useNavigate } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Messages() {\n  _s();\n  const [messages, setMessages] = useState([\"Let's get startee\"]);\n  const [input, setInput] = useState('');\n  const navigate = useNavigate();\n  const [info, setInfo] = useState([]);\n  const [weather, setWeather] = useState([]);\n  useEffect(() => {\n    // Optional: You can load initial messages from the backend here\n    // fetchMessages();\n  }, []);\n  const sendWeather = async () => {\n    try {\n      // Send the message to the backend via POST request\n      const response = await fetch('http://127.0.0.1:5000/api/weatherInfo', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          weatherInfo: weather\n        })\n      });\n      const data = await response.json();\n\n      // If successful, update the message list with the new message\n      if (response.ok) {\n        setMessages(prevMessages => [...prevMessages, data.message]); // Assuming the backend returns the new message\n        setInput(''); // Clear input field after sending\n      } else {\n        console.error('Failed to send message:', data.error);\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/messages');\n      const data = await response.json();\n      setMessages(data.messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n    }\n  };\n  const sendMessage = async () => {\n    setMessages(prevMessages => [...prevMessages, input]);\n    if (input.trim()) {\n      try {\n        // Send the message to the backend via POST request\n        const response = await fetch('http://127.0.0.1:5000/api/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            text: input,\n            weatherInfo: info\n          })\n        });\n        const data = await response.json();\n\n        // If successful, update the message list with the new message\n        if (response.ok) {\n          setMessages(prevMessages => [...prevMessages, data.message]); // Assuming the backend returns the new message\n          setInput(''); // Clear input field after sending\n        } else {\n          console.error('Failed to send message:', data.error);\n        }\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      children: \"Go to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n_s(Messages, \"lX8FVmjgJbbBICyI9UeRaZyrzuQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useNavigate","React","useState","useEffect","jsxDEV","_jsxDEV","Messages","_s","messages","setMessages","input","setInput","navigate","info","setInfo","weather","setWeather","sendWeather","response","fetch","method","headers","body","JSON","stringify","weatherInfo","data","json","ok","prevMessages","message","console","error","fetchMessages","sendMessage","trim","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/luke/Desktop/laundry-coms/src/pages/Messages.jsx"],"sourcesContent":["import {useNavigate} from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\n\nfunction Messages() {\n    const [messages, setMessages] = useState([\n        \"Let's get startee\",\n    ]);\n    const [input, setInput] = useState('');\n    const navigate = useNavigate();\n    const [info, setInfo] = useState([]);\n    const [weather, setWeather] = useState([\n\n    ]);\n\n    useEffect(() => {\n        // Optional: You can load initial messages from the backend here\n        // fetchMessages();\n    }, []);\n    \n    const sendWeather = async () => {\n        try {\n            // Send the message to the backend via POST request\n            const response = await fetch('http://127.0.0.1:5000/api/weatherInfo', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ \n                    weatherInfo: weather\n                }),\n            });\n\n            const data = await response.json();\n            \n            // If successful, update the message list with the new message\n            if (response.ok) {\n                setMessages(prevMessages => [...prevMessages, data.message]); // Assuming the backend returns the new message\n                setInput(''); // Clear input field after sending\n            } else {\n                console.error('Failed to send message:', data.error);\n            }\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n        }\n    }\n\n    const fetchMessages = async () => {\n        try {\n            const response = await fetch('http://127.0.0.1:5000/api/messages');\n            const data = await response.json();\n            setMessages(data.messages);\n        } catch (error) {\n            console.error(\"Error fetching messages:\", error);\n        }\n    };\n\n    const sendMessage = async () => {\n            setMessages(prevMessages => [...prevMessages, input])\n            if (input.trim()) {\n                try {\n                    // Send the message to the backend via POST request\n                    const response = await fetch('http://127.0.0.1:5000/api/messages', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({ \n                            text: input,\n                            weatherInfo: info\n                         }),\n                    });\n\n                    const data = await response.json();\n                    \n                    // If successful, update the message list with the new message\n                    if (response.ok) {\n                        setMessages(prevMessages => [...prevMessages, data.message]); // Assuming the backend returns the new message\n                        setInput(''); // Clear input field after sending\n                    } else {\n                        console.error('Failed to send message:', data.error);\n                    }\n                } catch (error) {\n                    console.error(\"Error sending message:\", error);\n                }\n        }\n    };\n\n\n\n    return (\n        <div className=\"chat-app\">\n            <h1>Messages</h1>\n            <button onClick={() => navigate(\"/\")}>Go to Home</button>\n            <div className=\"messages\">\n                {messages.map((message, index) => (\n                    <div className=\"message\" key={index}>{message}</div>\n                ))}\n            </div>\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                />\n                <button onClick={sendMessage}>Send</button>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Messages;\n"],"mappings":";;AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAC5C,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CACrC,mBAAmB,CACtB,CAAC;EACF,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMU,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAEtC,CAAC;EAEFC,SAAS,CAAC,MAAM;IACZ;IACA;EAAA,CACH,EAAE,EAAE,CAAC;EAEN,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,WAAW,EAAEV;QACjB,CAAC;MACL,CAAC,CAAC;MAEF,MAAMW,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIT,QAAQ,CAACU,EAAE,EAAE;QACbnB,WAAW,CAACoB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9DnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MAClB,CAAC,MAAM;QACHoB,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEN,IAAI,CAACM,KAAK,CAAC;MACxD;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAClE,MAAMO,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClClB,WAAW,CAACiB,IAAI,CAAClB,QAAQ,CAAC;IAC9B,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAED,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;IACxBzB,WAAW,CAACoB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEnB,KAAK,CAAC,CAAC;IACrD,IAAIA,KAAK,CAACyB,IAAI,CAAC,CAAC,EAAE;MACd,IAAI;QACA;QACA,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;UAC/DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjBY,IAAI,EAAE1B,KAAK;YACXe,WAAW,EAAEZ;UAChB,CAAC;QACN,CAAC,CAAC;QAEF,MAAMa,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;;QAElC;QACA,IAAIT,QAAQ,CAACU,EAAE,EAAE;UACbnB,WAAW,CAACoB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;UAC9DnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAClB,CAAC,MAAM;UACHoB,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEN,IAAI,CAACM,KAAK,CAAC;QACxD;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACR;EACJ,CAAC;EAID,oBACI3B,OAAA;IAAKgC,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACrBjC,OAAA;MAAAiC,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBrC,OAAA;MAAQsC,OAAO,EAAEA,CAAA,KAAM/B,QAAQ,CAAC,GAAG,CAAE;MAAA0B,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzDrC,OAAA;MAAKgC,SAAS,EAAC,UAAU;MAAAC,QAAA,EACpB9B,QAAQ,CAACoC,GAAG,CAAC,CAACd,OAAO,EAAEe,KAAK,kBACzBxC,OAAA;QAAKgC,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAcR;MAAO,GAAfe,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CACtD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNrC,OAAA;MAAKgC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5BjC,OAAA;QACIyC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAErC,KAAM;QACbsC,QAAQ,EAAGC,CAAC,IAAKtC,QAAQ,CAACsC,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACFrC,OAAA;QAAQsC,OAAO,EAAET,WAAY;QAAAI,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEd;AAACnC,EAAA,CA1GQD,QAAQ;EAAA,QAKIN,WAAW;AAAA;AAAAmD,EAAA,GALvB7C,QAAQ;AA4GjB,eAAeA,QAAQ;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}