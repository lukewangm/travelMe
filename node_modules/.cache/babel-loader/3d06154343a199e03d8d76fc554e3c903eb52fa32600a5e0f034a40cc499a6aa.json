{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Desktop/spr24/wp2/laundry-coms/src/pages/Timers.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Timers = () => {\n  _s();\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null);\n\n  // The state for our timer\n  const [timer, setTimer] = useState(\"00:00:00\");\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / 1000 / 60 / 60 % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds\n    };\n  };\n  const startTimer = e => {\n    let {\n      total,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(e);\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to\n      // add '0' at the beginning of the variable\n      setTimer((hours > 9 ? hours : \"0\" + hours) + \":\" + (minutes > 9 ? minutes : \"0\" + minutes) + \":\" + (seconds > 9 ? seconds : \"0\" + seconds));\n    }\n  };\n  const clearTimer = e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next\n    setTimer(\"00:45:00\");\n\n    // If you try to remove this line the\n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n  const getDeadTime = () => {\n    let deadline = new Date();\n    deadline.setMinutes(deadline.getMinutes() + 45);\n    return deadline;\n  };\n  useEffect(() => {\n    clearTimer(getDeadTime());\n  }, []);\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(Timers, \"38z5z2E9on0hBZZjKpzRYdf37QM=\");\n_c = Timers;\nexport default Timers;\n\n// import React from \"react\";\n// import {useNavigate} from \"react-router-dom\";\n// import '../styles/styles.css';\n// // https://www.geeksforgeeks.org/how-to-create-a-countdown-timer-using-reactjs/\n//\n// var countdowns = {}; // Object to store countdown intervals for each timer\n//\n// function startTimer(duration, timerId) {\n//     var time = duration * 60; // Convert minutes to seconds\n//     if (countdowns[timerId]) clearInterval(countdowns[timerId]); // Clear existing countdown for this timer\n//\n//     countdowns[timerId] = setInterval(function() {\n//         time--;\n//         var hours = Math.floor(time / 3600);\n//         var minutes = Math.floor((time % 3600) / 60);\n//         var seconds = time % 60;\n//\n//         hours = hours < 10 ? '0' + hours : hours; // If the hours is not 2 digits, add a '0'\n//         minutes = minutes < 10 ? '0' + minutes : minutes;\n//         seconds = seconds < 10 ? '0' + seconds : seconds;\n//\n//         document.getElementById('timer' + timerId).innerText = hours + ':' + minutes + ':' + seconds;\n//\n//         if (time <= 0) clearInterval(countdowns[timerId]);\n//     }, 1000);\n// }\n//\n// function resetTimer(timerId, initialTime) {\n//     if (countdowns[timerId]) clearInterval(countdowns[timerId]);\n//     // document.getElementById('timer' + timerId).innerText = initialTime;\n// }\n//\n// function Timers() {\n//     const navigate = useNavigate();\n//     return (\n//         <div>\n//             <h1>Laundry Timer</h1>\n//             <h2>Left Room</h2>\n//             <div class=\"row\">\n//                 <div class=\"col\">\n//                     <h2>{timer}</h2>\n//                     <div id=\"timer1\" class=\"timer\">00:00:00</div>\n//                     <button onClick={startTimer(35, '1')}>Start Washer Timer</button>\n//                     <button onClick={resetTimer('1','00:35:00')}>Reset Timer</button>\n//                 </div>\n//                 <div class=\"col\">\n//                     <div id=\"timer2\" class=\"timer\">00:00:00</div>\n//                     <button onClick={startTimer(35, '2')}>Start Dryer Timer</button>\n//                     <button onClick={resetTimer('2', '00:35:00')}>Reset Timer</button>\n//                 </div>\n//             </div>\n//\n//             <h2>Right Room</h2>\n//     <div class=\"row\">\n//         <div class=\"col\">\n//             <div id=\"timer3\" class=\"timer\">00:00:00</div>\n//             <button onclick=\"startTimer(35, '3')\">Start Washer Timer</button>\n//             <button onclick=\"resetTimer('3', '00:35:00')\">Reset Timer</button>\n//         </div>\n//         <div class=\"col\">\n//             <div id=\"timer4\" class=\"timer\">00:00:00</div>\n//             <button onclick=\"startTimer(45, '4')\">Start Dryer Timer</button>\n//             <button onclick=\"resetTimer('4', '00:45:00')\">Reset Timer</button>\n//         </div>\n//     </div>\n//         </div>\n//     )\n// }\n//\n// export default Timers;\nvar _c;\n$RefreshReg$(_c, \"Timers\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Timers","_s","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setMinutes","getMinutes","onClickReset","style","textAlign","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/luke/Desktop/spr24/wp2/laundry-coms/src/pages/Timers.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nconst Timers = () => {\n    // We need ref in this, because we are dealing\n    // with JS setInterval to keep track of it and\n    // stop it when needed\n    const Ref = useRef(null);\n\n    // The state for our timer\n    const [timer, setTimer] = useState(\"00:00:00\");\n\n    const getTimeRemaining = (e) => {\n        const total =\n            Date.parse(e) - Date.parse(new Date());\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor(\n            (total / 1000 / 60) % 60\n        );\n        const hours = Math.floor(\n            (total / 1000 / 60 / 60) % 24\n        );\n        return {\n            total,\n            hours,\n            minutes,\n            seconds,\n        };\n    };\n\n    const startTimer = (e) => {\n        let { total, hours, minutes, seconds } =\n            getTimeRemaining(e);\n        if (total >= 0) {\n            // update the timer\n            // check if less than 10 then we need to\n            // add '0' at the beginning of the variable\n            setTimer(\n                (hours > 9 ? hours : \"0\" + hours) +\n                \":\" +\n                (minutes > 9\n                    ? minutes\n                    : \"0\" + minutes) +\n                \":\" +\n                (seconds > 9 ? seconds : \"0\" + seconds)\n            );\n        }\n    };\n\n    const clearTimer = (e) => {\n        // If you adjust it you should also need to\n        // adjust the Endtime formula we are about\n        // to code next\n        setTimer(\"00:45:00\");\n\n        // If you try to remove this line the\n        // updating of timer Variable will be\n        // after 1000ms or 1sec\n        if (Ref.current) clearInterval(Ref.current);\n        const id = setInterval(() => {\n            startTimer(e);\n        }, 1000);\n        Ref.current = id;\n    };\n\n    const getDeadTime = () => {\n        let deadline = new Date();\n        deadline.setMinutes(deadline.getMinutes() + 45);\n        return deadline;\n    };\n\n    useEffect(() => {\n        clearTimer(getDeadTime());\n    }, []);\n\n    const onClickReset = () => {\n        clearTimer(getDeadTime());\n    };\n\n    return (\n        <div\n            style={{ textAlign: \"center\", margin: \"auto\" }}>\n            <h2>{timer}</h2>\n            <button onClick={onClickReset}>Reset</button>\n        </div>\n    );\n};\n\nexport default Timers;\n\n\n// import React from \"react\";\n// import {useNavigate} from \"react-router-dom\";\n// import '../styles/styles.css';\n// // https://www.geeksforgeeks.org/how-to-create-a-countdown-timer-using-reactjs/\n//\n// var countdowns = {}; // Object to store countdown intervals for each timer\n//\n// function startTimer(duration, timerId) {\n//     var time = duration * 60; // Convert minutes to seconds\n//     if (countdowns[timerId]) clearInterval(countdowns[timerId]); // Clear existing countdown for this timer\n//\n//     countdowns[timerId] = setInterval(function() {\n//         time--;\n//         var hours = Math.floor(time / 3600);\n//         var minutes = Math.floor((time % 3600) / 60);\n//         var seconds = time % 60;\n//\n//         hours = hours < 10 ? '0' + hours : hours; // If the hours is not 2 digits, add a '0'\n//         minutes = minutes < 10 ? '0' + minutes : minutes;\n//         seconds = seconds < 10 ? '0' + seconds : seconds;\n//\n//         document.getElementById('timer' + timerId).innerText = hours + ':' + minutes + ':' + seconds;\n//\n//         if (time <= 0) clearInterval(countdowns[timerId]);\n//     }, 1000);\n// }\n//\n// function resetTimer(timerId, initialTime) {\n//     if (countdowns[timerId]) clearInterval(countdowns[timerId]);\n//     // document.getElementById('timer' + timerId).innerText = initialTime;\n// }\n//\n// function Timers() {\n//     const navigate = useNavigate();\n//     return (\n//         <div>\n//             <h1>Laundry Timer</h1>\n//             <h2>Left Room</h2>\n//             <div class=\"row\">\n//                 <div class=\"col\">\n//                     <h2>{timer}</h2>\n//                     <div id=\"timer1\" class=\"timer\">00:00:00</div>\n//                     <button onClick={startTimer(35, '1')}>Start Washer Timer</button>\n//                     <button onClick={resetTimer('1','00:35:00')}>Reset Timer</button>\n//                 </div>\n//                 <div class=\"col\">\n//                     <div id=\"timer2\" class=\"timer\">00:00:00</div>\n//                     <button onClick={startTimer(35, '2')}>Start Dryer Timer</button>\n//                     <button onClick={resetTimer('2', '00:35:00')}>Reset Timer</button>\n//                 </div>\n//             </div>\n//\n//             <h2>Right Room</h2>\n//     <div class=\"row\">\n//         <div class=\"col\">\n//             <div id=\"timer3\" class=\"timer\">00:00:00</div>\n//             <button onclick=\"startTimer(35, '3')\">Start Washer Timer</button>\n//             <button onclick=\"resetTimer('3', '00:35:00')\">Reset Timer</button>\n//         </div>\n//         <div class=\"col\">\n//             <div id=\"timer4\" class=\"timer\">00:00:00</div>\n//             <button onclick=\"startTimer(45, '4')\">Start Dryer Timer</button>\n//             <button onclick=\"resetTimer('4', '00:45:00')\">Reset Timer</button>\n//         </div>\n//     </div>\n//         </div>\n//     )\n// }\n//\n// export default Timers;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}