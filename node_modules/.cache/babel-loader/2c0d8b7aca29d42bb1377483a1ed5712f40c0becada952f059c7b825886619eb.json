{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Desktop/laundry-coms/src/pages/Messages.jsx\",\n  _s = $RefreshSig$();\nimport { useNavigate } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Messages() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const socket = new WebSocket('ws://localhost:3000');\n  const navigate = useNavigate();\n  useEffect(() => {\n    socket.onmessage = event => {\n      const receivedMessage = event.data;\n      setMessages([...messages, receivedMessage]);\n    };\n  }, [messages]);\n\n  // Select DOM elements\n  const messageInput = document.getElementById('message');\n  const sendButton = document.getElementById('sendButton');\n  const responseDisplay = document.getElementById('response');\n\n  // Event listener for button click\n  sendButton.addEventListener('click', async () => {\n    const message = messageInput.value.trim();\n    if (message) {\n      try {\n        // Send the message to the backend using the POST method\n        const response = await fetch('http://127.0.0.1:5000/api/data', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json' // Let the backend know the content type is JSON\n          },\n          body: JSON.stringify({\n            text: message\n          }) // Send the message as JSON in the request body\n        });\n        const data = await response.json();\n\n        // Display the response from the backend\n        responseDisplay.textContent = JSON.stringify(data, null, 2);\n      } catch (error) {\n        console.error('Error:', error);\n        responseDisplay.textContent = 'Failed to send message.';\n      }\n    } else {\n      responseDisplay.textContent = 'Please enter a message.';\n    }\n  });\n  const sendMessage = () => {\n    const response = fetch('http://127.0.0.1:5000/api/data', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // Let the backend know the content type is JSON\n      },\n      body: JSON.stringify({\n        text: input\n      }) // Send the message as JSON in the request body\n    });\n    const data = response.json();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      children: \"Go to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(Messages, \"hA/SKj9GCrp/mEtP1Kq+y7BbB80=\", false, function () {\n  return [useNavigate];\n});\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useNavigate","React","useState","useEffect","jsxDEV","_jsxDEV","Messages","_s","messages","setMessages","input","setInput","socket","WebSocket","navigate","onmessage","event","receivedMessage","data","messageInput","document","getElementById","sendButton","responseDisplay","addEventListener","message","value","trim","response","fetch","method","headers","body","JSON","stringify","text","json","textContent","error","console","sendMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","type","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/luke/Desktop/laundry-coms/src/pages/Messages.jsx"],"sourcesContent":["import {useNavigate} from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\n\nfunction Messages() {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const socket = new WebSocket('ws://localhost:3000');\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        socket.onmessage = (event) => {\n            const receivedMessage = event.data;\n            setMessages([...messages, receivedMessage]);\n        };\n    }, [messages]);\n\n\n        // Select DOM elements\n        const messageInput = document.getElementById('message');\n        const sendButton = document.getElementById('sendButton');\n        const responseDisplay = document.getElementById('response');\n    \n        // Event listener for button click\n        sendButton.addEventListener('click', async () => {\n          const message = messageInput.value.trim();\n    \n          if (message) {\n            try {\n              // Send the message to the backend using the POST method\n              const response = await fetch('http://127.0.0.1:5000/api/data', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json', // Let the backend know the content type is JSON\n                },\n                body: JSON.stringify({ text: message }) // Send the message as JSON in the request body\n              });\n    \n              const data = await response.json();\n    \n              // Display the response from the backend\n              responseDisplay.textContent = JSON.stringify(data, null, 2);\n            } catch (error) {\n              console.error('Error:', error);\n              responseDisplay.textContent = 'Failed to send message.';\n            }\n          } else {\n            responseDisplay.textContent = 'Please enter a message.';\n          }\n        });\n        \n    const sendMessage = () => {\n        const response = fetch('http://127.0.0.1:5000/api/data', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json', // Let the backend know the content type is JSON\n            },\n            body: JSON.stringify({ text: input }) // Send the message as JSON in the request body\n          });\n\n          const data = response.json();\n    };\n\n\n    return (\n        <div className=\"chat-app\">\n            <h1>Messages</h1>\n            <button onClick={() => navigate(\"/\")}>Go to Home</button>\n            <div className=\"messages\">\n                {messages.map((message, index) => (\n                    <div key={index}>{message}</div>\n                ))}\n            </div>\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                />\n                <button onClick={sendMessage}>Send</button>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Messages;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}