{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Desktop/laundry-coms/src/pages/Messages.jsx\",\n  _s = $RefreshSig$();\nimport { useNavigate } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Messages() {\n  _s();\n  const [messages, setMessages] = useState([\"Hello! How are you?\", \"I'm doing great, thanks for asking!\", \"What are you up to today?\"]);\n  const [input, setInput] = useState('');\n  const navigate = useNavigate();\n  const [info, setInfo] = useState([]);\n  useEffect(() => {\n    // Optional: You can load initial messages from the backend here\n    // fetchMessages();\n  }, []);\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/messages');\n      const data = await response.json();\n      setMessages(data.messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n    }\n  };\n  const sendMessage = async () => {\n    setMessages(prevMessages => [...prevMessages, input]);\n    if (input.trim()) {\n      try {\n        // Send the message to the backend via POST request\n        const response = await fetch('http://127.0.0.1:5000/api/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            text: input,\n            weatherInfo: info\n          })\n        });\n        const data = await response.json();\n\n        // If successful, update the message list with the new message\n        if (response.ok) {\n          setMessages(prevMessages => [...prevMessages, data.message]); // Assuming the backend returns the new message\n          setInput(''); // Clear input field after sending\n        } else {\n          console.error('Failed to send message:', data.error);\n        }\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      children: \"Go to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Messages, \"hsjJ0Dm66ZEWJ4NVcddlt/YJaeA=\", false, function () {\n  return [useNavigate];\n});\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useNavigate","React","useState","useEffect","jsxDEV","_jsxDEV","Messages","_s","messages","setMessages","input","setInput","navigate","info","setInfo","fetchMessages","response","fetch","data","json","error","console","sendMessage","prevMessages","trim","method","headers","body","JSON","stringify","text","weatherInfo","ok","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/luke/Desktop/laundry-coms/src/pages/Messages.jsx"],"sourcesContent":["import {useNavigate} from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\n\nfunction Messages() {\n    const [messages, setMessages] = useState([\n        \"Hello! How are you?\",\n        \"I'm doing great, thanks for asking!\",\n        \"What are you up to today?\",\n    ]);\n    const [input, setInput] = useState('');\n    const navigate = useNavigate();\n    const [info, setInfo] = useState([]);\n\n    useEffect(() => {\n        // Optional: You can load initial messages from the backend here\n        // fetchMessages();\n    }, []);\n    \n    const fetchMessages = async () => {\n        try {\n            const response = await fetch('http://127.0.0.1:5000/api/messages');\n            const data = await response.json();\n            setMessages(data.messages);\n        } catch (error) {\n            console.error(\"Error fetching messages:\", error);\n        }\n    };\n\n    const sendMessage = async () => {\n            setMessages(prevMessages => [...prevMessages, input])\n            if (input.trim()) {\n                try {\n                    // Send the message to the backend via POST request\n                    const response = await fetch('http://127.0.0.1:5000/api/messages', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({ \n                            text: input,\n                            weatherInfo: info\n                         }),\n                    });\n\n                    const data = await response.json();\n                    \n                    // If successful, update the message list with the new message\n                    if (response.ok) {\n                        setMessages(prevMessages => [...prevMessages, data.message]); // Assuming the backend returns the new message\n                        setInput(''); // Clear input field after sending\n                    } else {\n                        console.error('Failed to send message:', data.error);\n                    }\n                } catch (error) {\n                    console.error(\"Error sending message:\", error);\n                }\n        }\n    };\n\n\n\n    return (\n        <div className=\"chat-app\">\n            <h1>Messages</h1>\n            <button onClick={() => navigate(\"/\")}>Go to Home</button>\n            <div className=\"messages\">\n                {messages.map((message, index) => (\n                    <div key={index}>{message}</div>\n                ))}\n            </div>\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                />\n                <button onClick={sendMessage}>Send</button>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Messages;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}