{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Desktop/spr24/wp2/laundry-coms/src/pages/MyTimer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyTimer = ({\n  timerID = 0,\n  initialMinutes = 45\n}) => {\n  _s();\n  const Ref = useRef(null);\n  const [timer, setTimer] = useState(`00:${initialMinutes}:00`);\n  const [isActive, setIsActive] = useState(false);\n  // Use useRef to persist the WebSocket connection without causing re-renders\n  const socket = useRef(null);\n  useEffect(() => {\n    // Initialize WebSocket connection\n    socket.current = new WebSocket('ws://localhost:3000');\n    socket.current.onopen = function () {\n      console.log('Connection established');\n      // Optionally, request current timer info here\n    };\n    socket.current.onmessage = function (event) {\n      console.log('Message from server:', event.data);\n      try {\n        const message = JSON.parse(event.data);\n        if (message.id === timerID) {\n          if (message.reset === true) {\n            clearInterval(Ref.current); // Clear the existing interval\n            Ref.current = null; // Reset the ref\n            setTimer(`00:${initialMinutes}:00`); // Reset the timer display\n            setIsActive(false); // Mark the timer as inactive\n          } else {\n            const deadTime = new Date(message.endTime); // Convert ISO string back to Date object\n            clearTimer(deadTime);\n          }\n        }\n      } catch (e) {\n        console.error('Error parsing message from server:', e);\n      }\n    };\n\n    // Clean up on component unmount\n    return () => {\n      if (socket.current) {\n        socket.current.close();\n      }\n    };\n  }, [initialMinutes, timerID]); // Ensure the effect runs only once or when relevant dependencies change\n\n  // Remaining component logic unchanged...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"10px\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startButtonHandler,\n      children: \"Start Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(MyTimer, \"TvPIgA6DZ3z175noayL7SxCshVk=\");\n_c = MyTimer;\nexport default MyTimer;\nvar _c;\n$RefreshReg$(_c, \"MyTimer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","MyTimer","timerID","initialMinutes","_s","Ref","timer","setTimer","isActive","setIsActive","socket","current","WebSocket","onopen","console","log","onmessage","event","data","message","JSON","parse","id","reset","clearInterval","deadTime","Date","endTime","clearTimer","e","error","close","style","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","startButtonHandler","onClickReset","_c","$RefreshReg$"],"sources":["/Users/luke/Desktop/spr24/wp2/laundry-coms/src/pages/MyTimer.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nconst MyTimer = ({ timerID = 0, initialMinutes = 45 }) => {\n    const Ref = useRef(null);\n    const [timer, setTimer] = useState(`00:${initialMinutes}:00`);\n    const [isActive, setIsActive] = useState(false);\n    // Use useRef to persist the WebSocket connection without causing re-renders\n    const socket = useRef(null);\n\n    useEffect(() => {\n        // Initialize WebSocket connection\n        socket.current = new WebSocket('ws://localhost:3000');\n\n        socket.current.onopen = function() {\n            console.log('Connection established');\n            // Optionally, request current timer info here\n        };\n\n        socket.current.onmessage = function(event) {\n            console.log('Message from server:', event.data);\n            try {\n                const message = JSON.parse(event.data);\n                if (message.id === timerID) {\n                    if (message.reset === true) {\n                        clearInterval(Ref.current); // Clear the existing interval\n                        Ref.current = null; // Reset the ref\n                        setTimer(`00:${initialMinutes}:00`); // Reset the timer display\n                        setIsActive(false); // Mark the timer as inactive\n                    } else {\n                        const deadTime = new Date(message.endTime); // Convert ISO string back to Date object\n                        clearTimer(deadTime);\n                    }\n                }\n            } catch (e) {\n                console.error('Error parsing message from server:', e);\n            }\n        };\n\n        // Clean up on component unmount\n        return () => {\n            if (socket.current) {\n                socket.current.close();\n            }\n        };\n    }, [initialMinutes, timerID]); // Ensure the effect runs only once or when relevant dependencies change\n\n    // Remaining component logic unchanged...\n\n    return (\n        <div style={{ margin: \"10px\", textAlign: \"center\" }}>\n            <h2>{timer}</h2>\n            <button onClick={startButtonHandler}>Start Timer</button>\n            <button onClick={onClickReset}>Reset</button>\n        </div>\n    );\n};\n\nexport default MyTimer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,OAAO,GAAGA,CAAC;EAAEC,OAAO,GAAG,CAAC;EAAEC,cAAc,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAMC,GAAG,GAAGR,MAAM,CAAC,IAAI,CAAC;EACxB,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAE,MAAKO,cAAe,KAAI,CAAC;EAC7D,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/C;EACA,MAAMc,MAAM,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE3BC,SAAS,CAAC,MAAM;IACZ;IACAY,MAAM,CAACC,OAAO,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IAErDF,MAAM,CAACC,OAAO,CAACE,MAAM,GAAG,YAAW;MAC/BC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC;IACJ,CAAC;IAEDL,MAAM,CAACC,OAAO,CAACK,SAAS,GAAG,UAASC,KAAK,EAAE;MACvCH,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEE,KAAK,CAACC,IAAI,CAAC;MAC/C,IAAI;QACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACC,IAAI,CAAC;QACtC,IAAIC,OAAO,CAACG,EAAE,KAAKpB,OAAO,EAAE;UACxB,IAAIiB,OAAO,CAACI,KAAK,KAAK,IAAI,EAAE;YACxBC,aAAa,CAACnB,GAAG,CAACM,OAAO,CAAC,CAAC,CAAC;YAC5BN,GAAG,CAACM,OAAO,GAAG,IAAI,CAAC,CAAC;YACpBJ,QAAQ,CAAE,MAAKJ,cAAe,KAAI,CAAC,CAAC,CAAC;YACrCM,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;UACxB,CAAC,MAAM;YACH,MAAMgB,QAAQ,GAAG,IAAIC,IAAI,CAACP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC;YAC5CC,UAAU,CAACH,QAAQ,CAAC;UACxB;QACJ;MACJ,CAAC,CAAC,OAAOI,CAAC,EAAE;QACRf,OAAO,CAACgB,KAAK,CAAC,oCAAoC,EAAED,CAAC,CAAC;MAC1D;IACJ,CAAC;;IAED;IACA,OAAO,MAAM;MACT,IAAInB,MAAM,CAACC,OAAO,EAAE;QAChBD,MAAM,CAACC,OAAO,CAACoB,KAAK,CAAC,CAAC;MAC1B;IACJ,CAAC;EACL,CAAC,EAAE,CAAC5B,cAAc,EAAED,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE/B;;EAEA,oBACIF,OAAA;IAAKgC,KAAK,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAChDnC,OAAA;MAAAmC,QAAA,EAAK7B;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBvC,OAAA;MAAQwC,OAAO,EAAEC,kBAAmB;MAAAN,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzDvC,OAAA;MAAQwC,OAAO,EAAEE,YAAa;MAAAP,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEd,CAAC;AAACnC,EAAA,CArDIH,OAAO;AAAA0C,EAAA,GAAP1C,OAAO;AAuDb,eAAeA,OAAO;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}